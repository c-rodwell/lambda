service: prac2
# app and org for use with dashboard.serverless.com
app: newapp
org: rodwellcolin

custom:
  itemTableName: '${self:provider.stage}item_table'
  userTableName: '${self:provider.stage}user_table1'
  userPoolName: '${self:provider.stage}user_pool'

provider:
  name: aws
  runtime: python3.8
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem 
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem 
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ItemTable", "Arn" ] }
        - { "Fn::GetAtt": ["UserTable", "Arn" ] }
  environment:
    ITEM_TABLE: ${self:custom.itemTableName}
    USER_TABLE: ${self:custom.userTableName}
    REGION: ${self:provider.region}

functions:
  create_user:
    handler: user_lambdas.create_user
    events:
     - http:
        path: users
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes:
           - users/write
  get_user:
    handler: user_lambdas.get_user
    events:
     - http:
        path: users
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes:
           - users/read
  add_item:
    handler: item_lambdas.add_item
    events:
     - http:
        path: items
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes:
           - items/write
  get_item:
    handler: item_lambdas.get_item
    events:
     - http:
        path: items
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes:
           - items/read
  get_user_items:
    handler: item_lambdas.get_user_items
    events:
     - http:
        path: useritems
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes:
           - items/read
  edit_item_field:
    handler: item_lambdas.edit_item_field
    events:
     - http:
        path: items
        method: put
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes:
           - items/write
  delete_item:
    handler: item_lambdas.delete_item
    events:
     - http:
        path: items
        method: delete
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes:
           - items/write

resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTableName}

    ItemTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: itemId
            AttributeType: N
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: itemId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.itemTableName}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: '${self:custom.userPoolName}-client'
        UserPoolId:
          Ref: CognitoUserPool
        SupportedIdentityProviders: ["COGNITO"]
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows: ["implicit"] #options are [implicit, client_credentials, code]
        CallbackURLs: ["https://www.google.com"]
        AllowedOAuthScopes: ["phone", "email", "openid", "profile", "aws.cognito.signin.user.admin", "items/read", "items/write"]
        ExplicitAuthFlows: #allowed: [ALLOW_CUSTOM_AUTH, ADMIN_NO_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH]
          - ADMIN_NO_SRP_AUTH #not sure what this is - not listed on dashboard. but all the other ones say not allowed with legacy something.
        GenerateSecret: false

    UserPoolDomain:
      Type: 'AWS::Cognito::UserPoolDomain'
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        Domain: '${self:service}-${self:provider.stage}'

    UserServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: users
        Name: "Users Server"
        Scopes:
            - ScopeName: read
              ScopeDescription: "read users: get user"
            - ScopeName: write
              ScopeDescription: "write users: create/edit/delete users"
        UserPoolId: 
          Ref: CognitoUserPool

    ItemServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: items
        Name: "Items Server"
        Scopes:
            - ScopeName: read 
              ScopeDescription: "read items: get item, get all user items"
            - ScopeName: write 
              ScopeDescription: "write items: create/edit/delete item"
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        ProviderARNs: 
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn

#Print out the Id of the User Pool that is created
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient

# For full config options, check the docs:
#    docs.serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
